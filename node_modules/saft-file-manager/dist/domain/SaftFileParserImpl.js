"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SaftFileParserImpl = void 0;
const xmldom_1 = require("xmldom");
const tipo_reporte_1 = require("../domain/models/tipo_reporte");
const field_rules_1 = require("./models/field_rules");
const reporte_1 = require("./models/reporte");
const fields_validation_1 = require("../validations/fields_validation");
class SaftFileParserImpl {
    constructor() {
        this.xmlParser = new xmldom_1.DOMParser();
    }
    parse(file) {
        let tipoReporte = new tipo_reporte_1.TipoReporte(11, "11");
        let reporte = new reporte_1.Reporte(11, tipoReporte, file);
        let rootDir = __dirname;
        rootDir = rootDir.replace('domain', '');
        let stringData = require(`${rootDir}/assets/data.json`);
        const jsonStr = JSON.stringify(stringData);
        const structureList = JSON.parse(jsonStr);
        let filteredList = new Array();
        structureList.filter(item => item.TIPO_REPORTE_ID === 11)
            .forEach((item => {
            if (item.IS_TIPO_COMPLEXO === 1 && item.ESTRUTURA_CAMPO_ID != undefined && item.ESTRUTURA_CAMPO_ID != null && item.ESTRUTURA_CAMPO_ID > 0) {
                const fatherItem = structureList.find(father => father.ID == item.ESTRUTURA_CAMPO_ID);
                let rule = new field_rules_1.FieldRules();
                rule = fatherItem !== null && fatherItem !== void 0 ? fatherItem : new field_rules_1.FieldRules();
                item.estruturaCampoObj = rule;
            }
            filteredList.push(item);
        }));
        return new fields_validation_1.FieldsValidation().validate({ reporte, modelRules: filteredList });
    }
}
exports.SaftFileParserImpl = SaftFileParserImpl;
