"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkingDocumentsMapToModel = void 0;
const WorkingDocuments_1 = require("../../../validations/model/saft/sourcedocuments/workingdocuments/WorkingDocuments");
class WorkingDocumentsMapToModel {
    constructor(workingMap) {
        this.workingModel = new WorkingDocuments_1.WorkingDocuments();
        this.workingMap = new Map();
        this.workingMap = workingMap;
    }
    get() {
        const workingEntries = Object.fromEntries(this.workingMap);
        const workingStr = JSON.stringify(workingEntries);
        this.workingModel = JSON.parse(workingStr);
        // WorkDocument
        const workMap = this.workingMap.get('workDocument');
        let workList = new Array();
        if (typeof (workMap) !== 'undefined') {
            workMap.forEach((item) => {
                const workEntries = Object.fromEntries(item);
                const workStr = JSON.stringify(workEntries);
                const workModel = JSON.parse(workStr);
                // Line
                const lineMapList = item.get('line');
                if (typeof (lineMapList) !== 'undefined') {
                    let lineList = new Array();
                    lineMapList.forEach((item) => {
                        const lineEntries = Object.fromEntries(item);
                        const lineStr = JSON.stringify(lineEntries);
                        const lineModel = JSON.parse(lineStr);
                        const orderReferencesMap = item.get('orderReferences');
                        const productSerialNumberMap = item.get('productSerialNumber');
                        const referencesMap = item.get('references');
                        const taxMap = item.get('tax');
                        const customsInformationMap = item.get('customsInformation');
                        if (typeof (orderReferencesMap) !== 'undefined') {
                            const orderReferencesEntries = Object.fromEntries(orderReferencesMap);
                            const orderReferencesStr = JSON.stringify(orderReferencesEntries);
                            const orderReferencesModel = JSON.parse(orderReferencesStr);
                            lineModel.orderReferences = orderReferencesModel;
                        }
                        if (typeof (productSerialNumberMap) !== 'undefined') {
                            const productSerialNumberEntries = Object.fromEntries(productSerialNumberMap);
                            const productSerialNumberStr = JSON.stringify(productSerialNumberEntries);
                            const productSerialNumberModel = JSON.parse(productSerialNumberStr);
                            lineModel.productSerialNumber = productSerialNumberModel;
                        }
                        if (typeof (referencesMap) !== 'undefined') {
                            const referencesEntries = Object.fromEntries(referencesMap);
                            const referencesStr = JSON.stringify(referencesEntries);
                            const referencesModel = JSON.parse(referencesStr);
                            lineModel.references = referencesModel;
                        }
                        if (typeof (taxMap) !== 'undefined') {
                            const taxEntries = Object.fromEntries(taxMap);
                            const taxStr = JSON.stringify(taxEntries);
                            const taxModel = JSON.parse(taxStr);
                            lineModel.tax = taxModel;
                        }
                        if (typeof (customsInformationMap) !== 'undefined') {
                            const customsInformationEntries = Object.fromEntries(customsInformationMap);
                            const customsInformationStr = JSON.stringify(customsInformationEntries);
                            const customsInformationModel = JSON.parse(customsInformationStr);
                            lineModel.customsInformation = customsInformationModel;
                        }
                        lineList.push(lineModel);
                    });
                    workModel.line = lineList;
                }
                // documentTotals
                const documentTotalsMap = item.get('documentTotals');
                if (typeof (documentTotalsMap) !== 'undefined') {
                    const documentTotalsEntries = Object.fromEntries(documentTotalsMap);
                    const documentTotalsStr = JSON.stringify(documentTotalsEntries);
                    const documentTotalsModel = JSON.parse(documentTotalsStr);
                    const currencyMap = documentTotalsMap.get('currency');
                    if (typeof (currencyMap) !== 'undefined') {
                        const currencyEntries = Object.fromEntries(currencyMap);
                        const currencyStr = JSON.stringify(currencyEntries);
                        const currencyModel = JSON.parse(currencyStr);
                        documentTotalsModel.currency = currencyModel;
                    }
                    workModel.documentTotals = documentTotalsModel;
                }
                const documentStatusMap = item.get('documentStatus');
                if (typeof (documentStatusMap) !== 'undefined') {
                    const documentStatusEntries = Object.fromEntries(documentStatusMap);
                    const documentStatusStr = JSON.stringify(documentStatusEntries);
                    const documentStatusModel = JSON.parse(documentStatusStr);
                    workModel.documentStatus = documentStatusModel;
                }
                workList.push(workModel);
            });
        }
        this.workingModel.workDocument = workList;
        return this.workingModel;
    }
}
exports.WorkingDocumentsMapToModel = WorkingDocumentsMapToModel;
