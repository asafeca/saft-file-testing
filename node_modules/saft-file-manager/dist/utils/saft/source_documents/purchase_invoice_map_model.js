"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PurchaseInvoicesMapToModel = void 0;
const PurchaseInvoices_1 = require("../../../validations/model/saft/sourcedocuments/purchaseinvoices/PurchaseInvoices");
class PurchaseInvoicesMapToModel {
    constructor(purchaseInvoicesMap) {
        this.purchaseInvoicesModel = new PurchaseInvoices_1.PurchaseInvoices();
        this.purchaseInvoicesMap = purchaseInvoicesMap;
    }
    get() {
        const purchaseEntries = Object.fromEntries(this.purchaseInvoicesMap);
        const purchaseStr = JSON.stringify(purchaseEntries);
        this.purchaseInvoicesModel = JSON.parse(purchaseStr);
        const invoiceMapList = this.purchaseInvoicesMap.get('invoice');
        if (typeof (invoiceMapList) !== 'undefined') {
            let invoiceModelList = new Array();
            invoiceMapList.forEach(invoiceMap => {
                const invoiceEntries = Object.fromEntries(invoiceMap);
                const invoiceStr = JSON.stringify(invoiceEntries);
                let invoiceModel = JSON.parse(invoiceStr);
                const referencesMap = invoiceMap.get('references');
                if (typeof (referencesMap) !== 'undefined') {
                    const referencesEntries = Object.fromEntries(referencesMap);
                    const referencesStr = JSON.stringify(referencesEntries);
                    const referencesModel = JSON.parse(referencesStr);
                    invoiceModel.references = referencesModel;
                }
                const documentTotalsMap = invoiceMap.get('documentTotals');
                if (typeof (documentTotalsMap) !== 'undefined') {
                    const documentTotalsEntries = Object.fromEntries(documentTotalsMap);
                    const documentTotalsStr = JSON.stringify(documentTotalsEntries);
                    let documentTotalsModel = JSON.parse(documentTotalsStr);
                    const deductibleMap = documentTotalsMap.get('deductible');
                    if (typeof (deductibleMap) !== 'undefined') {
                        const deductibleEntries = Object.fromEntries(deductibleMap);
                        const deductibleStr = JSON.stringify(deductibleEntries);
                        const deductibleModel = JSON.parse(deductibleStr);
                        documentTotalsModel.deductible = deductibleModel;
                    }
                    const currencyMap = documentTotalsMap.get('currency');
                    if (typeof (currencyMap) !== 'undefined') {
                        const currencyEntries = Object.fromEntries(currencyMap);
                        const currencyStr = JSON.stringify(currencyEntries);
                        const currencyModel = JSON.parse(currencyStr);
                        documentTotalsModel.currency = currencyModel;
                    }
                    invoiceModel.documentTotals = documentTotalsModel;
                }
                const withholdingTax = invoiceMap.get('withholdingTax');
                if (typeof (withholdingTax) !== 'undefined') {
                    const withholdingTaxEntries = Object.fromEntries(withholdingTax);
                    const withholdingTaxStr = JSON.stringify(withholdingTaxEntries);
                    const withholdingTaxModel = JSON.parse(withholdingTaxStr);
                    invoiceModel.withholdingTax = withholdingTaxModel;
                }
                invoiceModelList.push(invoiceModel);
            });
            this.purchaseInvoicesModel.invoice = invoiceModelList;
        }
        return this.purchaseInvoicesModel;
    }
}
exports.PurchaseInvoicesMapToModel = PurchaseInvoicesMapToModel;
