"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SalesInvoicesMapToModel = void 0;
const SalesInvoices_1 = require("../../../validations/model/saft/sourcedocuments/salesinvoices/SalesInvoices");
class SalesInvoicesMapToModel {
    constructor(salesMap) {
        this.salesInvoices = new SalesInvoices_1.SalesInvoices();
        this.salesMap = new Map();
        this.salesMap = salesMap;
    }
    get() {
        const salesEntries = Object.fromEntries(this.salesMap);
        const salesStr = JSON.stringify(salesEntries);
        this.salesInvoices = JSON.parse(salesStr);
        // INVOICE
        const invoiceMapList = this.salesMap.get('invoice');
        if (typeof (invoiceMapList) !== 'undefined') {
            let invoiceList = new Array();
            invoiceMapList.forEach((item) => {
                const invoiceEntries = Object.fromEntries(item);
                const invoiceStr = JSON.stringify(invoiceEntries);
                let invoiceModel = JSON.parse(invoiceStr);
                const documentStatusMap = item.get('documentStatus');
                const specialRegimesMap = item.get('specialRegimes');
                const documentTotalsMap = item.get('documentTotals');
                const shipTo = item.get('shipTo');
                const shipFrom = item.get('shipFrom');
                const lineMapList = item.get('line');
                if (typeof (documentStatusMap) !== 'undefined') {
                    const documentStatusEntries = Object.fromEntries(documentStatusMap);
                    const documentStatusStr = JSON.stringify(documentStatusEntries);
                    const documentStatusModel = JSON.parse(documentStatusStr);
                    invoiceModel.documentStatus = documentStatusModel;
                }
                if (typeof (specialRegimesMap) !== 'undefined') {
                    const specialRegimesEntries = Object.fromEntries(specialRegimesMap);
                    const specialRegimesStr = JSON.stringify(specialRegimesEntries);
                    const specialRegimesModel = JSON.parse(specialRegimesStr);
                    invoiceModel.specialRegimes = specialRegimesModel;
                }
                if (typeof (documentTotalsMap) !== 'undefined') {
                    const documentTotalsEntries = Object.fromEntries(documentTotalsMap);
                    const documentTotalsStr = JSON.stringify(documentTotalsEntries);
                    const documentTotalsModel = JSON.parse(documentTotalsStr);
                    const settlementMap = documentTotalsMap.get('settlement');
                    const paymentMap = documentTotalsMap.get('payment');
                    if (typeof (settlementMap) !== 'undefined') {
                        const settlementEntries = Object.fromEntries(settlementMap);
                        const settlementStr = JSON.stringify(settlementEntries);
                        let settlementModel = JSON.parse(settlementStr);
                        documentTotalsModel.settlement = settlementModel;
                    }
                    if (typeof (paymentMap) !== 'undefined') {
                        const paymentEntries = Object.fromEntries(paymentMap);
                        const paymentStr = JSON.stringify(paymentEntries);
                        let paymentModel = JSON.parse(paymentStr);
                        documentTotalsModel.payment = paymentModel;
                    }
                    invoiceModel.documentTotals = documentTotalsModel;
                }
                if (typeof (shipTo) !== 'undefined') {
                    const shipToEntries = Object.fromEntries(shipTo);
                    const shipToStr = JSON.stringify(shipToEntries);
                    const shipToModel = JSON.parse(shipToStr);
                    // get address
                    const address = shipTo.get('address');
                    if (typeof (address) !== 'undefined') {
                        const addressEntries = Object.fromEntries(address);
                        const addressStr = JSON.stringify(addressEntries);
                        const addressModel = JSON.parse(addressStr);
                        shipToModel.address = addressModel;
                    }
                    invoiceModel.shipTo = shipToModel;
                }
                if (typeof (shipFrom) !== 'undefined') {
                    const shipFromEntries = Object.fromEntries(shipTo);
                    const shipFromToStr = JSON.stringify(shipFromEntries);
                    const shipFromToModel = JSON.parse(shipFromToStr);
                    // get address
                    const address = shipFrom.get('address');
                    if (typeof (address) !== 'undefined') {
                        const addressEntries = Object.fromEntries(address);
                        const addressStr = JSON.stringify(addressEntries);
                        const addressModel = JSON.parse(addressStr);
                        shipFromToModel.address = addressModel;
                    }
                    invoiceModel.shipFrom = shipFromToModel;
                }
                if (typeof (lineMapList) !== 'undefined') {
                    let lineList = new Array();
                    lineMapList.forEach((item) => {
                        const lineEntries = Object.fromEntries(item);
                        const lineStr = JSON.stringify(lineEntries);
                        const lineModel = JSON.parse(lineStr);
                        const orderReferencesMap = item.get('orderReferences');
                        const productSerialNumberMap = item.get('productSerialNumber');
                        const referencesMap = item.get('references');
                        const taxMap = item.get('tax');
                        const customsInformationMap = item.get('customsInformation');
                        if (typeof (orderReferencesMap) !== 'undefined') {
                            const orderReferencesEntries = Object.fromEntries(orderReferencesMap);
                            const orderReferencesStr = JSON.stringify(orderReferencesEntries);
                            const orderReferencesModel = JSON.parse(orderReferencesStr);
                            lineModel.orderReferences = orderReferencesModel;
                        }
                        if (typeof (productSerialNumberMap) !== 'undefined') {
                            const productSerialNumberEntries = Object.fromEntries(productSerialNumberMap);
                            const productSerialNumberStr = JSON.stringify(productSerialNumberEntries);
                            const productSerialNumberModel = JSON.parse(productSerialNumberStr);
                            lineModel.productSerialNumber = productSerialNumberModel;
                        }
                        if (typeof (referencesMap) !== 'undefined') {
                            const referencesEntries = Object.fromEntries(referencesMap);
                            const referencesStr = JSON.stringify(referencesEntries);
                            const referencesModel = JSON.parse(referencesStr);
                            lineModel.references = referencesModel;
                        }
                        if (typeof (taxMap) !== 'undefined') {
                            const taxEntries = Object.fromEntries(taxMap);
                            const taxStr = JSON.stringify(taxEntries);
                            const taxModel = JSON.parse(taxStr);
                            lineModel.tax = taxModel;
                        }
                        if (typeof (customsInformationMap) !== 'undefined') {
                            const customsInformationEntries = Object.fromEntries(customsInformationMap);
                            const customsInformationStr = JSON.stringify(customsInformationEntries);
                            const customsInformationModel = JSON.parse(customsInformationStr);
                            lineModel.customsInformation = customsInformationModel;
                        }
                        lineList.push(lineModel);
                    });
                    invoiceModel.line = lineList;
                }
                invoiceList.push(invoiceModel);
            });
            this.salesInvoices.invoice = invoiceList;
        }
        return this.salesInvoices;
    }
}
exports.SalesInvoicesMapToModel = SalesInvoicesMapToModel;
