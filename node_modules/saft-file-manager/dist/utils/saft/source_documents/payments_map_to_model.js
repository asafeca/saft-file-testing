"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentsMapToModel = void 0;
const SourceDocumentsPayments_1 = require("../../../validations/model/saft/sourcedocuments/payments/SourceDocumentsPayments");
class PaymentsMapToModel {
    constructor(paymentsMap) {
        this.paymentsMap = new Map();
        this.paymentsModel = new SourceDocumentsPayments_1.SourceDocumentsPayments();
        this.paymentsMap = paymentsMap;
    }
    get() {
        const paymentsEntries = Object.fromEntries(this.paymentsMap);
        const paymentsStr = JSON.stringify(paymentsEntries);
        this.paymentsModel = JSON.parse(paymentsStr);
        const paymentMapList = this.paymentsMap.get('payment');
        let paymentModelList = new Array();
        if (typeof (paymentMapList) !== 'undefined') {
            paymentMapList.forEach((paymentItemMap) => {
                let paymentEntries = Object.fromEntries(paymentItemMap);
                const paymentStr = JSON.stringify(paymentEntries);
                const paymentModel = JSON.parse(paymentStr);
                const documentStatusMap = paymentItemMap.get('documentStatus');
                const paymentMethodMap = paymentItemMap.get('paymentMethod');
                const lineMapList = paymentItemMap.get('line');
                const documentTotalsMap = paymentItemMap.get('documentTotals');
                const withholdingTaxMap = paymentItemMap.get('withholdingTax');
                if (typeof (documentStatusMap) !== 'undefined') {
                    const documentStatusEntries = Object.entries(documentStatusMap);
                    const documentStatusStr = JSON.stringify(documentStatusEntries);
                    const documentStatusModel = JSON.parse(documentStatusStr);
                    paymentModel.documentStatus = documentStatusModel;
                }
                if (typeof (paymentMethodMap) !== 'undefined') {
                    const paymentMethodEntries = Object.fromEntries(paymentMethodMap);
                    const paymentMethodStr = JSON.stringify(paymentMethodEntries);
                    const paymentMethodModel = JSON.parse(paymentMethodStr);
                    paymentModel.paymentMethod = paymentMethodModel;
                }
                if (typeof (lineMapList) !== 'undefined') {
                    let lineList = new Array();
                    lineMapList.forEach((lineItem) => {
                        const lineEntries = Object.fromEntries(lineItem);
                        const lineStr = JSON.stringify(lineEntries);
                        let paymentLineModel = JSON.parse(lineStr);
                        const sourceDocumentIdMap = lineItem.get('sourceDocumentId');
                        if (typeof (sourceDocumentIdMap) !== 'undefined') {
                            const sourceDocumentsEntries = Object.fromEntries(sourceDocumentIdMap);
                            const sourceDocumentIdStr = JSON.stringify(sourceDocumentsEntries);
                            const sourceDocumentIdModel = JSON.parse(sourceDocumentIdStr);
                            paymentLineModel.sourceDocumentId = sourceDocumentIdModel;
                        }
                        const taxMap = lineItem.get('tax');
                        if (typeof (taxMap) !== 'undefined') {
                            const taxEntries = Object.fromEntries(taxMap);
                            const taxStr = JSON.stringify(taxEntries);
                            const taxModel = JSON.parse(taxStr);
                            paymentLineModel.tax = taxModel;
                        }
                        lineList.push(paymentLineModel);
                    });
                    paymentModel.line = lineList;
                }
                if (typeof (documentTotalsMap) !== 'undefined') {
                    const documentTotalsEntries = Object.fromEntries(documentTotalsMap);
                    const documentTotalsStr = JSON.stringify(documentTotalsEntries);
                    const documentTotalsModel = JSON.parse(documentTotalsStr);
                    const currencyMap = documentTotalsMap.get('currency');
                    if (typeof (currencyMap) !== 'undefined') {
                        const currrencyEntries = Object.fromEntries(currencyMap);
                        const currencyStr = JSON.stringify(currrencyEntries);
                        const currencyModel = JSON.parse(currencyStr);
                        documentTotalsModel.currency = currencyModel;
                    }
                    paymentModel.documentTotals = documentTotalsModel;
                }
                if (typeof (withholdingTaxMap) !== 'undefined') {
                    const holdingTaxEntries = Object.fromEntries(withholdingTaxMap);
                    const holdingTaxStr = JSON.stringify(holdingTaxEntries);
                    const holdingTaxMOdel = JSON.parse(holdingTaxStr);
                    paymentModel.withholdingTax = holdingTaxMOdel;
                }
                paymentModelList.push(paymentModel);
            });
        }
        this.paymentsModel.payment = paymentModelList;
        return this.paymentsModel;
    }
}
exports.PaymentsMapToModel = PaymentsMapToModel;
