"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MovementOfGoodsMapTOModel = void 0;
const MovementOfGoods_1 = require("../../../validations/model/saft/sourcedocuments/movementofgoods/MovementOfGoods");
class MovementOfGoodsMapTOModel {
    constructor(goodsMap) {
        this.goodsModel = new MovementOfGoods_1.MovementOfGoods();
        this.goodsMap = goodsMap;
    }
    get() {
        const goodsEntries = Object.fromEntries(this.goodsMap);
        const goodsStr = JSON.stringify(goodsEntries);
        this.goodsModel = JSON.parse(goodsStr);
        const stockMovementMapList = this.goodsMap.get('stockMovement');
        if (typeof (stockMovementMapList) !== 'undefined') {
            let stockMovementList = new Array();
            stockMovementMapList.forEach(stockItemMap => {
                const stockItemEntries = Object.fromEntries(stockItemMap);
                const stockItemStr = JSON.stringify(stockItemEntries);
                const stockItemModel = JSON.parse(stockItemStr);
                const documentStatusMap = stockItemMap.get('documentStatus');
                if (typeof (documentStatusMap) !== 'undefined') {
                    const statusEntries = Object.fromEntries(documentStatusMap);
                    const statusStr = JSON.stringify(statusEntries);
                    const statusModel = JSON.parse(statusStr);
                    stockItemModel.documentStatus = statusModel;
                }
                const shipToMap = stockItemMap.get('shipTo');
                if (typeof (shipToMap) !== 'undefined') {
                    const shipToEntries = Object.fromEntries(shipToMap);
                    const shipToStr = JSON.stringify(shipToEntries);
                    const shipToModel = JSON.parse(shipToStr);
                    const addressMap = shipToMap.get('address');
                    if (typeof (addressMap) !== 'undefined') {
                        const addressEntries = Object.fromEntries(addressMap);
                        const addressStr = JSON.stringify(addressEntries);
                        const addressModel = JSON.parse(addressStr);
                        shipToModel.address = addressModel;
                    }
                    stockItemModel.shipTo = shipToModel;
                }
                const shipFromMap = stockItemMap.get('shipFrom');
                if (typeof (shipFromMap) !== 'undefined') {
                    const shipFromEntries = Object.fromEntries(shipFromMap);
                    const shipFromStr = JSON.stringify(shipFromEntries);
                    const shipFromModel = JSON.parse(shipFromStr);
                    const addressMap = shipFromMap.get('address');
                    if (typeof (addressMap) !== 'undefined') {
                        const addressEntries = Object.fromEntries(addressMap);
                        const addressStr = JSON.stringify(addressEntries);
                        const addressModel = JSON.parse(addressStr);
                        shipFromModel.address = addressModel;
                    }
                    stockItemModel.shipFrom = shipFromModel;
                }
                const stockItemLineMapList = stockItemMap.get('line');
                if (typeof (stockItemLineMapList) !== 'undefined') {
                    let lineModelList = new Array();
                    stockItemLineMapList.forEach(lineMap => {
                        const lineEntries = Object.fromEntries(lineMap);
                        const lineStr = JSON.stringify(lineEntries);
                        let lineModel = JSON.parse(lineStr);
                        const orderReferencesMap = lineMap.get('orderReferences');
                        if (typeof (orderReferencesMap) !== 'undefined') {
                            const orderEntries = Object.fromEntries(orderReferencesMap);
                            const orderStr = JSON.stringify(orderEntries);
                            const orderModel = JSON.parse(orderStr);
                            lineModel.orderReferences = orderModel;
                        }
                        const productSerialNumberMap = lineMap.get('productSerialNumber');
                        if (typeof (productSerialNumberMap) !== 'undefined') {
                            const productSerialEntries = Object.fromEntries(productSerialNumberMap);
                            const productSerialNumberStr = JSON.stringify(productSerialEntries);
                            const productSerialModel = JSON.parse(productSerialNumberStr);
                            lineModel.productSerialNumber = productSerialModel;
                        }
                        const taxMap = lineMap.get('tax');
                        if (typeof (taxMap) !== 'undefined') {
                            const taxEntries = Object.fromEntries(taxMap);
                            const taxStr = JSON.stringify(taxEntries);
                            const taxModel = JSON.parse(taxStr);
                            lineModel.tax = taxModel;
                            1;
                        }
                        const customsInformationMap = lineMap.get('customsInformation');
                        if (typeof (customsInformationMap) !== 'undefined') {
                            const customsInformationEntries = Object.fromEntries(customsInformationMap);
                            const customsInformationStr = JSON.stringify(customsInformationEntries);
                            const customsInformationModel = JSON.parse(customsInformationStr);
                            lineModel.customsInformation = customsInformationModel;
                        }
                        lineModelList.push(lineModel);
                    });
                    stockItemModel.line = lineModelList;
                }
                stockMovementList.push(stockItemModel);
            });
            this.goodsModel.stockMovement = stockMovementList;
        }
        return this.goodsModel;
    }
}
exports.MovementOfGoodsMapTOModel = MovementOfGoodsMapTOModel;
