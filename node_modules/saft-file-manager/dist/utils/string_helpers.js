"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StringHelper = void 0;
const detalheErro_1 = require("../domain/models/detalheErro");
class StringHelper {
    static firstCharToLowerCase(strValue) {
        strValue = strValue.replace(strValue.substring(0, 1), strValue.substring(0, 1).toLowerCase());
        return strValue;
    }
    static iSValidString({ str, length }) {
        if (typeof (str) !== 'undefined') {
            if (str.length === 0)
                return false;
            return (str.length > length ? false : true);
        }
        return false;
    }
    static isInteger(str) {
        const num = parseInt(str);
        return Number.isInteger(num);
    }
    static isBoolean(str) {
        if (str === '0' || str === '1' || str.toLowerCase() === 'true' || str.toLowerCase() === 'false')
            return true;
        return false;
    }
    static iSDecimal(str) {
        const _value = str.valueOf();
        const char = _value.includes('.') ? '.' : ',';
        const splittedNumber = _value.split(char);
        if (splittedNumber.length > 2 || splittedNumber.length === 0)
            return false;
        const mainValue = parseInt(splittedNumber[0]);
        const commaValue = parseInt(splittedNumber[1]);
        if (mainValue >= 0 && commaValue >= 0)
            return true;
        return false;
    }
    static iSLocalDateTime(str) {
        if (this.isStringNull(str))
            return false;
        return (Date.parse(str) > 0) && !isNaN(Date.parse(str));
    }
    static isStringNull(str) {
        if (typeof (str) !== 'undefined' && str !== null)
            return false;
        return true;
    }
    static hasField({ rulesModelList, onMapModel, rule, errors }) {
        var _a;
        for (let index = 0; index < rulesModelList.length; index++) {
            let item = rulesModelList.at(index);
            if (typeof (item) !== 'undefined') {
                if (!onMapModel.has(StringHelper.firstCharToLowerCase(item.DESIGNACAO)) && item.IS_OBRIGATORIO === 1)
                    errors.set(rule.DESIGNACAO, new detalheErro_1.ErrorDetail({ campo: item.DESIGNACAO, numeroLinha: -1, designacao: `${item.DESIGNACAO !== undefined ? item.DESIGNACAO : ''} nÃ£o existe em/no ${(_a = rule === null || rule === void 0 ? void 0 : rule.DESIGNACAO) !== null && _a !== void 0 ? _a : 'ficheiro'}!` }));
            }
        }
    }
}
exports.StringHelper = StringHelper;
