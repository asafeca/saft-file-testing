"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FieldsValidation = void 0;
const file_parser_1 = require("./file_parser");
const file_starage_parser_1 = require("./file_starage_parser");
const map_to_model_1 = require("../utils/map_to_model");
const group_fields_validation_1 = require("./group_fields_validation");
class FieldsValidation {
    validate({ reporte, modelRules }) {
        file_starage_parser_1.FileParserStorage.dispose();
        const file = reporte.file;
        file_starage_parser_1.FileParserStorage.set(file_parser_1.FileParser.parse(file, reporte), reporte = reporte);
        // Check fileModel Info if there is already an error
        if (this.modelHasErrors())
            return file_starage_parser_1.FileParserStorage.fileModel;
        const result = this.processSaft({ fileModel: this.mapToFileModel(file_starage_parser_1.FileParserStorage.fileModel), modelRules: modelRules });
        // console.log(result)
        return result;
    }
    modelHasErrors() {
        let map = file_starage_parser_1.FileParserStorage.fileModel;
        return map.has('Error') ? true : false;
    }
    mapToFileModel(obj) {
        /**
        * FOR YOUR INFORMATION
        *
        * commonly we use
        *
        * const entries = Object.fromEntries(mapObject)
        *
        * const stringData =  JSON.stringfy(entries)
        *
        * const saftModel : FileModelSAFT = JSON.parse(stringData)
        *
        *
        * // BUT IT'S NOT WORKING
        *
        * That's why the convertion from Saft Map Object to SaftModel had to be hard coded as below:
        *
        */
        const commonMap = obj;
        const generalLedgerEntries = commonMap.get('generalLedgerEntries');
        const headerMap = commonMap.get('header');
        const masterFilesMap = commonMap.get('masterFiles');
        const sourceDocumentsMap = commonMap.get('sourceDocuments');
        return map_to_model_1.MapToModel.getSaftModel({ generalLedgerEntries, headerMap, masterFilesMap, sourceDocumentsMap });
    }
    processSaft({ fileModel, modelRules }) {
        let errorList = new Map();
        const model = new Map(Object.entries(fileModel));
        errorList = new group_fields_validation_1.GroupFieldsValidation(model, modelRules).validate();
        return errorList;
    }
}
exports.FieldsValidation = FieldsValidation;
