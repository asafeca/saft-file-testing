"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupFieldsValidation = void 0;
const detalheErro_1 = require("../domain/models/detalheErro");
const string_helpers_1 = require("../utils/string_helpers");
const current_object_1 = require("./model/saft/current_object");
class GroupFieldsValidation {
    constructor(model, modelRules) {
        GroupFieldsValidation.modelRules = modelRules;
        this.model = model;
    }
    validate() {
        return GroupFieldsValidation.validate(this.model, GroupFieldsValidation.modelRules);
    }
    static validate(model, rules) {
        let errorList = new Map();
        model.forEach((value, key) => {
            if (typeof (key) === 'undefined')
                return;
            let currentError = new current_object_1.CurrentObject();
            currentError.objectName = key;
            currentError.objectInfo = 'item encontrado';
            let rule = GroupFieldsValidation.modelRules.find(item => item.DESIGNACAO.toLowerCase() === key.toLowerCase());
            if (typeof (value) === 'object') {
                // Is an array
                if (value.constructor === Array) {
                    let _Array = Array.from(value);
                    for (let index = 0; index < _Array.length; index++) {
                        const _model = _Array.at(index);
                        const _map = new Map(Object.entries(_model));
                        const _errors = GroupFieldsValidation.validate(_map, GroupFieldsValidation.modelRules);
                        if (_errors.size > 0) {
                            _errors.forEach((v, k) => {
                                errorList.set(k, new detalheErro_1.ErrorDetail({ campo: v.campo, numeroLinha: v.numeroLinha, designacao: v.designacao }));
                            });
                        }
                    }
                    return;
                }
                if ((rule === null || rule === void 0 ? void 0 : rule.IS_TIPO_COMPLEXO) === 1) {
                    const children = GroupFieldsValidation.modelRules.filter(child => child.ESTRUTURA_CAMPO_ID === (rule === null || rule === void 0 ? void 0 : rule.ID));
                    const _map = new Map(Object.entries(value));
                    if (_map.size > 0) {
                        string_helpers_1.StringHelper.hasField({ rulesModelList: children, onMapModel: _map, errors: errorList, rule: rule });
                        const _errors = GroupFieldsValidation.validate(_map, children);
                        if (_errors.size > 0) {
                            _errors.forEach((v, k) => {
                                errorList.set(k, new detalheErro_1.ErrorDetail({ campo: v.campo, numeroLinha: v.numeroLinha, designacao: v.designacao }));
                            });
                        }
                        return;
                    }
                    else {
                        if (rule.IS_OBRIGATORIO === 1) {
                            const father = GroupFieldsValidation.modelRules.find(item => item.ID === (rule === null || rule === void 0 ? void 0 : rule.ESTRUTURA_CAMPO_ID));
                            errorList.set(key, new detalheErro_1.ErrorDetail({ campo: key, designacao: `O campo ${father === null || father === void 0 ? void 0 : father.DESIGNACAO}.${key} é inválid.`, numeroLinha: -1 }));
                            return;
                        }
                    }
                }
            }
            switch (rule === null || rule === void 0 ? void 0 : rule.TIPO_DADO) {
                case 'String': {
                    try {
                        const father = GroupFieldsValidation.modelRules.find(item => item.ID === (rule === null || rule === void 0 ? void 0 : rule.ESTRUTURA_CAMPO_ID));
                        if (rule.IS_OBRIGATORIO === 1) {
                            if (typeof (value) === 'undefined' || value === null)
                                errorList.set(key, new detalheErro_1.ErrorDetail({ campo: key, designacao: `O campo ${father === null || father === void 0 ? void 0 : father.DESIGNACAO}.${key} é inválido. Tamanho máximo: ${rule.TAMANHO}`, numeroLinha: -1 }));
                        }
                    }
                    catch (e) {
                        errorList.set(key, new detalheErro_1.ErrorDetail({ campo: key, designacao: `${e}`, numeroLinha: -1 }));
                    }
                    break;
                }
                case 'Integer': {
                    if (!string_helpers_1.StringHelper.isInteger(value.valueOf())) {
                        errorList.set(key, new detalheErro_1.ErrorDetail({ campo: key, designacao: `${key} é inválido. Deve ser inteiro. Valor encontrado: ${value}`, numeroLinha: -1 }));
                    }
                    break;
                }
                case 'BigDecimal': {
                    if (!string_helpers_1.StringHelper.iSDecimal(value)) {
                        try {
                            errorList.set(key, new detalheErro_1.ErrorDetail({ campo: key, designacao: `${key} é inválido. Deve ser Decimal. Valor encontrado: ${value}`, numeroLinha: -1 }));
                        }
                        catch (e) {
                            errorList.set(key, new detalheErro_1.ErrorDetail({ campo: key, designacao: `${key}. Error: ${e}`, numeroLinha: -1 }));
                        }
                    }
                    break;
                }
                case 'Boolean': {
                    if (!string_helpers_1.StringHelper.isBoolean(value.valueOf())) {
                        errorList.set(key, new detalheErro_1.ErrorDetail({ campo: key, designacao: `${key} é inválido. Deve ser Boolean(true/false, 1/0). Valor encontrado: ${value}`, numeroLinha: -1 }));
                    }
                    break;
                }
                case 'LocalDateTime': {
                    const _val = value.valueOf();
                    if (!string_helpers_1.StringHelper.iSLocalDateTime(_val)) {
                        errorList.set(key, new detalheErro_1.ErrorDetail({ campo: key, designacao: `${key} é inválido: ${value}`, numeroLinha: -1 }));
                    }
                    break;
                }
                case 'LocalDate': {
                    const _val = value.valueOf();
                    if (!string_helpers_1.StringHelper.iSLocalDateTime(_val)) {
                        errorList.set(key, new detalheErro_1.ErrorDetail({ campo: key, designacao: `${key} é inválido: ${value}`, numeroLinha: -1 }));
                    }
                    break;
                }
            }
        });
        return errorList;
    }
}
exports.GroupFieldsValidation = GroupFieldsValidation;
