import { parseBooleans } from "xml2js/lib/processors"
import { ErrorDetail } from "../domain/models/detalheErro"
import { FieldRules } from "../domain/models/field_rules"

export class StringHelper {

    static firstCharToLowerCase(strValue: string): string {

        strValue = strValue.replace(strValue.substring(0, 1), strValue.substring(0, 1).toLowerCase())

        return strValue

    }


    static iSValidString({ str, length }: { str: string, length: number }): Boolean {
        if (typeof (str) !== 'undefined') {
            if (str.length === 0)
                return false
            return (str.length > length ? false : true)
        }


        return false

    }


    static isInteger(str: string): Boolean {

        const num = parseInt(str)

        return Number.isInteger(num)
    }

    static isBoolean(str: string): Boolean {

        if (str === '0' || str === '1' || str.toLowerCase() === 'true' || str.toLowerCase() === 'false')
            return true

        return false
    }


    static iSDecimal(str: Object): Boolean {

        const _value = str.valueOf() as String
        const char = _value.includes('.') ? '.' : ','


        const splittedNumber = _value.split(char)

        if (splittedNumber.length > 2 || splittedNumber.length === 0)
            return false

        const mainValue = parseInt(splittedNumber[0])
        const commaValue = parseInt(splittedNumber[1])

        if (mainValue >= 0 && commaValue >= 0)
            return true


        return false

    }


    static iSLocalDateTime(str: string): Boolean {

        if (this.isStringNull(str))
            return false

        return (Date.parse(str) > 0) && !isNaN(Date.parse(str))

    }


    private static isStringNull(str: string): Boolean {

        if (typeof (str) !== 'undefined' && str !== null)
            return false


        return true
    }


    static hasField({ rulesModelList, onMapModel, rule, errors }:
        { rulesModelList: Array<FieldRules>, onMapModel: Map<string, Object>, errors: Map<string, Object>, rule: FieldRules }) {


        for (let index = 0; index < rulesModelList.length; index++) {

            let item = rulesModelList.at(index)

            if (typeof (item) !== 'undefined') {

                if (!onMapModel.has(StringHelper.firstCharToLowerCase(item.DESIGNACAO)) && item.IS_OBRIGATORIO === 1)
                    errors.set(rule.DESIGNACAO, new ErrorDetail({ campo: item.DESIGNACAO, numeroLinha: -1, designacao: `${item.DESIGNACAO !== undefined ? item.DESIGNACAO : ''} nÃ£o existe em/no ${rule?.DESIGNACAO ?? 'ficheiro'}!` }))

            }
        }

    }
}