import { SAFTCustomerAddress } from "../../validations/model/saft/masterfiles/customer/children/SAFTCustomerAddress"
import { SAFTCustomerShipToAddress } from "../../validations/model/saft/masterfiles/customer/children/SAFTCustomerShipToAddress"
import { SAFTMasterFileCustomer } from "../../validations/model/saft/masterfiles/customer/SAFTMasterFileCustomer"
import { SAFTMasterFileProduct } from "../../validations/model/saft/masterfiles/product/SAFTMasterFileProduct"
import { SAFTMasterFile } from "../../validations/model/saft/masterfiles/SAFTMasterFile"
import { SAFTSupplierBillingAddress } from "../../validations/model/saft/masterfiles/supplier/children/SAFTSupplierBillingAddress"
import { SAFTSupplierShipFromAddress } from "../../validations/model/saft/masterfiles/supplier/children/SAFTSupplierShipFromAddress"
import { SAFTMasterfileSupplier } from "../../validations/model/saft/masterfiles/supplier/SAFTMasterfileSupplier"
import { TaxTable } from "../../validations/model/saft/masterfiles/taxtable/TaxTable"
import { TaxTableEntry } from "../../validations/model/saft/masterfiles/taxtable/TaxTableEntry"

export class MasterFilesMapToModel {

    private masterFilesMap: Map<string, Object>
    private masterFilesModel = new SAFTMasterFile()

    constructor({ masterFilesMap }: { masterFilesMap: Map<string, Object> }) {
        this.masterFilesMap = masterFilesMap
    }

    public get(): SAFTMasterFile {

        const generalLedgerAccounts = this.masterFilesMap.get('generalLedgerAccounts') as Map<string, Object>
        const customer = this.masterFilesMap.get('customer') as Array<Map<string, Object>>
        const supplier = this.masterFilesMap.get('supplier') as Array<Map<string, Object>>
        const product = this.masterFilesMap.get('product') as Array<Map<string, Object>>
        const taxTable = this.masterFilesMap.get('taxTable') as Map<string, Object>

        if (typeof (generalLedgerAccounts) === 'object')
            this.getGeneralLedgerAccounts(generalLedgerAccounts)

        if (typeof (customer) === 'object')
            this.getCustomer(customer)
        if (typeof (supplier) === 'object')
            this.getSuppliers(supplier)
        if (typeof (product) === 'object')
            this.getProduct(product)

        if (typeof (taxTable) === 'object')
            this.getTaxTable(taxTable)

        return this.masterFilesModel
    }


    private getTaxTable(taxTableMap: Map<string, Object>) {

        const taxTableMapList = taxTableMap.get('taxTableEntry') as Array<Map<string, Object>>

        if (typeof (taxTableMapList) === 'object') {

            let taxesTable = new Array<TaxTableEntry>()

            if (typeof (taxTableMapList) === 'object') {

                taxTableMapList.forEach(item => {

                    const entries = Object.fromEntries(item)
                    const entryStr = JSON.stringify(entries)
                    const entryModel: TaxTableEntry = JSON.parse(entryStr)

                    taxesTable.push(entryModel)

                })

                let taxTable = new TaxTable()

                taxTable.taxTableEntry = taxesTable

                this.masterFilesModel.taxTable = taxTable

            }

        }


    }

    private getProduct(productsMap: Array<Map<string, Object>>) {
        let products: Array<SAFTMasterFileProduct> = new Array()

        productsMap.forEach(item => {
            const productEntries = Object.fromEntries(item)
            const productStr = JSON.stringify(productEntries)
            const productModel: SAFTMasterFileProduct = JSON.parse(productStr)

            products.push(productModel)


        })
        this.masterFilesModel.product = products

    }

    private getSuppliers(suppliersMap: Array<Map<string, Object>>) {

        let supplierModelList = new Array<SAFTMasterfileSupplier>()

        suppliersMap.forEach((item) => {

            // Billing address
            const billAddress = item.get('billingAddress') as Map<string, Object>
            const billEntries = Object.fromEntries(billAddress)
            const billStr = JSON.stringify(billEntries)
            const billAddressModel: SAFTSupplierBillingAddress = JSON.parse(billStr)

            // SHIP TO ADDRESS
            const shipAddress = item.get('shipFromAddress') as Map<string, Object>
            const shipEntries = Object.fromEntries(shipAddress)
            const shipStr = JSON.stringify(shipEntries)
            const shipAddressModel: SAFTSupplierShipFromAddress = JSON.parse(shipStr)

            // supplier
            const supplierEntries = Object.fromEntries(item)
            const supplierStr = JSON.stringify(supplierEntries)
            let supplierModel: SAFTMasterfileSupplier = JSON.parse(supplierStr)
            supplierModel.billingAddress = billAddressModel
            supplierModel.shipFromAddress = shipAddressModel

            supplierModelList.push(supplierModel)


        })
        this.masterFilesModel.supplier = supplierModelList



    }


    private getGeneralLedgerAccounts(ledgerMap: Map<string, Object>) {

        const accounts = ledgerMap.get('accounts')

    }

    private getCustomer(customersMap: Array<Map<string, Object>>) {

        let customerModelList = new Array<SAFTMasterFileCustomer>()

        customersMap.forEach((item) => {

            // Billing address
            const billAddress = item.get('billingAddress') as Map<string, Object>
            const billEntries = Object.fromEntries(billAddress)
            const billStr = JSON.stringify(billEntries)
            const billAddressModel: SAFTCustomerAddress = JSON.parse(billStr)

            // SHIP TO ADDRESS
            const shipAddress = item.get('shipToAddress') as Map<string, Object>
            const shipEntries = Object.fromEntries(shipAddress)
            const shipStr = JSON.stringify(shipEntries)
            const shipAddressModel: SAFTCustomerShipToAddress = JSON.parse(shipStr)

            // Customer
            const customerEntries = Object.fromEntries(item)
            const customerStr = JSON.stringify(customerEntries)
            let customerModel: SAFTMasterFileCustomer = JSON.parse(customerStr)
            customerModel.billingAddress = billAddressModel
            customerModel.shipToAddress = shipAddressModel

            customerModelList.push(customerModel)

        })

        this.masterFilesModel.customer = customerModelList

    }
}