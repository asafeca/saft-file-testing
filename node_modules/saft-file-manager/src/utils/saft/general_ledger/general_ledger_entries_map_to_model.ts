import { GeneralLedgerEntries } from "../../../validations/model/saft/generalledger/GeneralLedgerEntries";
import { GeneralLedgerEntrieJournal } from "../../../validations/model/saft/generalledger/journal/GeneralLedgerEntrieJournal";
import { JournalTransaction } from "../../../validations/model/saft/generalledger/journal/transaction/JournalTransaction";
import { TransactionCreditLine } from "../../../validations/model/saft/generalledger/journal/transaction/transactionline/TransactionCreditLine";
import { TransactionDebitLine } from "../../../validations/model/saft/generalledger/journal/transaction/transactionline/TransactionDebitLine";
import { TransactionLine } from "../../../validations/model/saft/generalledger/journal/transaction/transactionline/TransactionLine";

export class GeneralLedgerEntriesMapToModel {
    private generalLedgerEntriesModel = new GeneralLedgerEntries()
    private generalLedgerEntriesMap: Map<string, Object>

    constructor(generalLedgerEntriesMap: Map<string, Object>) {

        this.generalLedgerEntriesMap = generalLedgerEntriesMap

    }


    get(): GeneralLedgerEntries {

        const generalLedgerEntries = Object.fromEntries(this.generalLedgerEntriesMap)
        const generalLedgerEntriesStr = JSON.stringify(generalLedgerEntries)
        this.generalLedgerEntriesModel = JSON.parse(generalLedgerEntriesStr)

        const journalMapList = this.generalLedgerEntriesMap.get('journal') as Array<Map<string, Object>>

        if (typeof (journalMapList) !== 'undefined') {

            let journalList = new Array<GeneralLedgerEntrieJournal>()

            journalMapList.forEach(journalMap => {

                const journalEntries = Object.fromEntries(journalMap)
                const journalStr = JSON.stringify(journalEntries)
                const journalModel: GeneralLedgerEntrieJournal = JSON.parse(journalStr)

                const transactionMapList = journalMap.get('transaction') as Array<Map<string, Object>>

                if (typeof (transactionMapList) !== 'undefined') {

                    let transactionModelList = new Array<JournalTransaction>()

                    transactionMapList.forEach(transactionMap => {
                        const transactionEntries = Object.fromEntries(transactionMap)
                        const transactionStr = JSON.stringify(transactionEntries)
                        const transactionModel: JournalTransaction = JSON.parse(transactionStr)


                        const lineMapList = transactionMap.get('line') as Array<Map<string, Object>>

                        if (typeof (lineMapList) !== 'undefined') {

                            let lineModelList = new Array<TransactionLine>()

                            lineMapList.forEach(lineMap => {

                                const lineEntries = Object.fromEntries(lineMap)
                                const lineStr = JSON.stringify(lineEntries)
                                const lineModel: TransactionLine = JSON.parse(lineStr)

                                const debitLineMap = lineMap.get('debitLine') as Map<string, Object>

                                if (typeof (debitLineMap) !== 'undefined') {

                                    const debitLineEntries = Object.fromEntries(debitLineMap)
                                    const debitLineStr = JSON.stringify(debitLineEntries)
                                    const debitLineModel: TransactionDebitLine = JSON.parse(debitLineStr)

                                    lineModel.debitLine = debitLineModel
                                }

                                const creditLineMap = lineMap.get('creditLine') as Map<string, Object>

                                if (typeof (creditLineMap) !== 'undefined') {
                                    const creditLineEntries = Object.fromEntries(creditLineMap)
                                    const creditLineStr = JSON.stringify(creditLineEntries)
                                    const creditLineModel: TransactionCreditLine = JSON.parse(creditLineStr)

                                    lineModel.creditLine = creditLineModel

                                }


                                lineModelList.push(lineModel)

                            })


                            transactionModel.line = lineModelList

                        }


                        transactionModelList.push(transactionModel)

                    })
                }





                journalList.push(journalModel)
            })

            this.generalLedgerEntriesModel.journal = journalList

        }


        return this.generalLedgerEntriesModel

    }
}