import { DocumentTotalsCurrency } from "../../../validations/model/saft/common/DocumentTotalsCurrency"
import { LineTax } from "../../../validations/model/saft/common/LineTax"
import { SAFTDocumentTotals } from "../../../validations/model/saft/common/SAFTDocumentTotals"
import { WithholdingTax } from "../../../validations/model/saft/common/WithholdingTax"
import { PaymentLine } from "../../../validations/model/saft/sourcedocuments/payments/payment/line/PaymentLine"
import { PaymentLineSourceDocument } from "../../../validations/model/saft/sourcedocuments/payments/payment/line/PaymentLineSourceDocument"
import { Payment } from "../../../validations/model/saft/sourcedocuments/payments/payment/Payment"
import { PaymentDocumentStatus } from "../../../validations/model/saft/sourcedocuments/payments/payment/PaymentDocumentStatus"
import { PaymentMethod } from "../../../validations/model/saft/sourcedocuments/payments/payment/PaymentMethod"
import { SourceDocumentsPayments } from "../../../validations/model/saft/sourcedocuments/payments/SourceDocumentsPayments"

export class PaymentsMapToModel {
    private paymentsMap = new Map<string, Object>()
    private paymentsModel = new SourceDocumentsPayments()

    constructor(paymentsMap: Map<string, Object>) {
        this.paymentsMap = paymentsMap

    }

    get(): SourceDocumentsPayments {

        const paymentsEntries = Object.fromEntries(this.paymentsMap)
        const paymentsStr = JSON.stringify(paymentsEntries)
        this.paymentsModel = JSON.parse(paymentsStr)

        const paymentMapList = this.paymentsMap.get('payment') as Array<Map<string, Object>>

        let paymentModelList = new Array<Payment>()

        if (typeof (paymentMapList) !== 'undefined') {
            paymentMapList.forEach((paymentItemMap) => {

                let paymentEntries = Object.fromEntries(paymentItemMap)
                const paymentStr = JSON.stringify(paymentEntries)
                const paymentModel: Payment = JSON.parse(paymentStr)

                const documentStatusMap = paymentItemMap.get('documentStatus') as Map<string, Object>
                const paymentMethodMap = paymentItemMap.get('paymentMethod') as Map<string, Object>
                const lineMapList = paymentItemMap.get('line') as Array<Map<string, Object>>
                const documentTotalsMap = paymentItemMap.get('documentTotals') as Map<string, Object>
                const withholdingTaxMap = paymentItemMap.get('withholdingTax') as Map<string, Object>

                if (typeof (documentStatusMap) !== 'undefined') {

                    const documentStatusEntries = Object.entries(documentStatusMap)
                    const documentStatusStr = JSON.stringify(documentStatusEntries)
                    const documentStatusModel: PaymentDocumentStatus = JSON.parse(documentStatusStr)
                    paymentModel.documentStatus = documentStatusModel

                }

                if (typeof (paymentMethodMap) !== 'undefined') {
                    const paymentMethodEntries = Object.fromEntries(paymentMethodMap)
                    const paymentMethodStr = JSON.stringify(paymentMethodEntries)
                    const paymentMethodModel: PaymentMethod = JSON.parse(paymentMethodStr)

                    paymentModel.paymentMethod = paymentMethodModel
                }


                if (typeof (lineMapList) !== 'undefined') {

                    let lineList: Array<PaymentLine> = new Array()

                    lineMapList.forEach((lineItem) => {
                        const lineEntries = Object.fromEntries(lineItem)
                        const lineStr = JSON.stringify(lineEntries)
                        let paymentLineModel: PaymentLine = JSON.parse(lineStr)

                        const sourceDocumentIdMap = lineItem.get('sourceDocumentId') as Map<string, Object>

                        if (typeof (sourceDocumentIdMap) !== 'undefined') {

                            const sourceDocumentsEntries = Object.fromEntries(sourceDocumentIdMap)
                            const sourceDocumentIdStr = JSON.stringify(sourceDocumentsEntries)
                            const sourceDocumentIdModel: PaymentLineSourceDocument = JSON.parse(sourceDocumentIdStr)

                            paymentLineModel.sourceDocumentId = sourceDocumentIdModel
                        }


                        const taxMap = lineItem.get('tax') as Map<string, Object>

                        if (typeof (taxMap) !== 'undefined') {

                            const taxEntries = Object.fromEntries(taxMap)
                            const taxStr = JSON.stringify(taxEntries)
                            const taxModel: LineTax = JSON.parse(taxStr)
                            paymentLineModel.tax = taxModel

                        }

                        lineList.push(paymentLineModel)

                    })

                    paymentModel.line = lineList

                }
                if (typeof (documentTotalsMap) !== 'undefined') {

                    const documentTotalsEntries = Object.fromEntries(documentTotalsMap)
                    const documentTotalsStr = JSON.stringify(documentTotalsEntries)
                    const documentTotalsModel: SAFTDocumentTotals = JSON.parse(documentTotalsStr)

                    const currencyMap = documentTotalsMap.get('currency') as Map<string, Object>

                    if (typeof (currencyMap) !== 'undefined') {

                        const currrencyEntries = Object.fromEntries(currencyMap)
                        const currencyStr = JSON.stringify(currrencyEntries)
                        const currencyModel: DocumentTotalsCurrency = JSON.parse(currencyStr)
                        documentTotalsModel.currency = currencyModel

                    }


                    paymentModel.documentTotals = documentTotalsModel

                }

                if (typeof (withholdingTaxMap) !== 'undefined') {
                    const holdingTaxEntries = Object.fromEntries(withholdingTaxMap)
                    const holdingTaxStr = JSON.stringify(holdingTaxEntries)
                    const holdingTaxMOdel: WithholdingTax = JSON.parse(holdingTaxStr)
                    paymentModel.withholdingTax = holdingTaxMOdel
                }



                paymentModelList.push(paymentModel)

            })
        }

        this.paymentsModel.payment = paymentModelList



        return this.paymentsModel

    }
}