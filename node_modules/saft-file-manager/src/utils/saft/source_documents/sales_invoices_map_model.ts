import { LineCustomsInformation } from "../../../validations/model/saft/common/LineCustomsInformation";
import { LineOrderReferences } from "../../../validations/model/saft/common/LineOrderReferences";
import { LineProductSerialNumber } from "../../../validations/model/saft/common/LineProductSerialNumber";
import { LineReferences } from "../../../validations/model/saft/common/LineReferences";
import { LineTax } from "../../../validations/model/saft/common/LineTax";
import { SaftAddress } from "../../../validations/model/saft/common/SaftAddress";
import { InvoiceBaseShipAddress } from "../../../validations/model/saft/sourcedocuments/salesinvoices/invoice/children/InvoiceBaseShipAddress";
import { InvoiceDocumentStatus } from "../../../validations/model/saft/sourcedocuments/salesinvoices/invoice/children/InvoiceDocumentStatus";
import { InvoiceSpecialRegimes } from "../../../validations/model/saft/sourcedocuments/salesinvoices/invoice/children/InvoiceSpecialRegimes";
import { InvoiceLine } from "../../../validations/model/saft/sourcedocuments/salesinvoices/invoice/children/line/InvoiceLine";
import { DocumentTotalsPayment } from "../../../validations/model/saft/sourcedocuments/salesinvoices/invoice/children/totals/DocumentTotalsPayment";
import { DocumentTotalsSettlement } from "../../../validations/model/saft/sourcedocuments/salesinvoices/invoice/children/totals/DocumentTotalsSettlement";
import { InvoiceDocumentTotals } from "../../../validations/model/saft/sourcedocuments/salesinvoices/invoice/children/totals/InvoiceDocumentTotals";
import { Invoice } from "../../../validations/model/saft/sourcedocuments/salesinvoices/invoice/Invoice";
import { SalesInvoices } from "../../../validations/model/saft/sourcedocuments/salesinvoices/SalesInvoices";

export class SalesInvoicesMapToModel {
    private salesInvoices = new SalesInvoices()
    private salesMap = new Map<string, Object>()

    constructor(salesMap: Map<string, Object>) {
        this.salesMap = salesMap
    }


    public get(): SalesInvoices {

        const salesEntries = Object.fromEntries(this.salesMap)
        const salesStr = JSON.stringify(salesEntries)
        this.salesInvoices = JSON.parse(salesStr)

        // INVOICE
        const invoiceMapList = this.salesMap.get('invoice') as Array<Map<string, Object>>
        if (typeof (invoiceMapList) !== 'undefined') {

            let invoiceList: Array<Invoice> = new Array()

            invoiceMapList.forEach((item) => {
                const invoiceEntries = Object.fromEntries(item)
                const invoiceStr = JSON.stringify(invoiceEntries)
                let invoiceModel: Invoice = JSON.parse(invoiceStr)

                const documentStatusMap = item.get('documentStatus') as Map<string, Object>
                const specialRegimesMap = item.get('specialRegimes') as Map<string, Object>
                const documentTotalsMap = item.get('documentTotals') as Map<string, Object>
                const shipTo = item.get('shipTo') as Map<string, Object>
                const shipFrom = item.get('shipFrom') as Map<string, Object>
                const lineMapList = item.get('line') as Array<Map<string, Object>>

                if (typeof (documentStatusMap) !== 'undefined') {

                    const documentStatusEntries = Object.fromEntries(documentStatusMap)
                    const documentStatusStr = JSON.stringify(documentStatusEntries)
                    const documentStatusModel: InvoiceDocumentStatus = JSON.parse(documentStatusStr)
                    invoiceModel.documentStatus = documentStatusModel

                }
                if (typeof (specialRegimesMap) !== 'undefined') {

                    const specialRegimesEntries = Object.fromEntries(specialRegimesMap)
                    const specialRegimesStr = JSON.stringify(specialRegimesEntries)
                    const specialRegimesModel: InvoiceSpecialRegimes = JSON.parse(specialRegimesStr)
                    invoiceModel.specialRegimes = specialRegimesModel

                }

                if (typeof (documentTotalsMap) !== 'undefined') {

                    const documentTotalsEntries = Object.fromEntries(documentTotalsMap)
                    const documentTotalsStr = JSON.stringify(documentTotalsEntries)
                    const documentTotalsModel: InvoiceDocumentTotals = JSON.parse(documentTotalsStr)

                    const settlementMap = documentTotalsMap.get('settlement') as Map<string, Object>
                    const paymentMap = documentTotalsMap.get('payment') as Map<string, Object>


                    if (typeof (settlementMap) !== 'undefined') {

                        const settlementEntries = Object.fromEntries(settlementMap)
                        const settlementStr = JSON.stringify(settlementEntries)
                        let settlementModel: DocumentTotalsSettlement = JSON.parse(settlementStr)
                        documentTotalsModel.settlement = settlementModel

                    }

                    if (typeof (paymentMap) !== 'undefined') {

                        const paymentEntries = Object.fromEntries(paymentMap)
                        const paymentStr = JSON.stringify(paymentEntries)
                        let paymentModel: DocumentTotalsPayment = JSON.parse(paymentStr)

                        documentTotalsModel.payment = paymentModel

                    }


                    invoiceModel.documentTotals = documentTotalsModel

                }
                if (typeof (shipTo) !== 'undefined') {
                    const shipToEntries = Object.fromEntries(shipTo)
                    const shipToStr = JSON.stringify(shipToEntries)
                    const shipToModel: InvoiceBaseShipAddress = JSON.parse(shipToStr)

                    // get address
                    const address = shipTo.get('address') as Map<string, Object>
                    if (typeof (address) !== 'undefined') {

                        const addressEntries = Object.fromEntries(address)
                        const addressStr = JSON.stringify(addressEntries)
                        const addressModel: SaftAddress = JSON.parse(addressStr)
                        shipToModel.address = addressModel
                    }
                    invoiceModel.shipTo = shipToModel

                }
                if (typeof (shipFrom) !== 'undefined') {

                    const shipFromEntries = Object.fromEntries(shipTo)
                    const shipFromToStr = JSON.stringify(shipFromEntries)
                    const shipFromToModel: InvoiceBaseShipAddress = JSON.parse(shipFromToStr)

                    // get address
                    const address = shipFrom.get('address') as Map<string, Object>
                    if (typeof (address) !== 'undefined') {

                        const addressEntries = Object.fromEntries(address)
                        const addressStr = JSON.stringify(addressEntries)
                        const addressModel: SaftAddress = JSON.parse(addressStr)
                        shipFromToModel.address = addressModel
                    }


                    invoiceModel.shipFrom = shipFromToModel


                }
                if (typeof (lineMapList) !== 'undefined') {

                    let lineList: Array<InvoiceLine> = new Array()

                    lineMapList.forEach((item) => {

                        const lineEntries = Object.fromEntries(item)
                        const lineStr = JSON.stringify(lineEntries)
                        const lineModel: InvoiceLine = JSON.parse(lineStr)

                        const orderReferencesMap = item.get('orderReferences') as Map<string, Object>
                        const productSerialNumberMap = item.get('productSerialNumber') as Map<string, Object>
                        const referencesMap = item.get('references') as Map<string, Object>
                        const taxMap = item.get('tax') as Map<string, Object>
                        const customsInformationMap = item.get('customsInformation') as Map<string, Object>


                        if (typeof (orderReferencesMap) !== 'undefined') {
                            const orderReferencesEntries = Object.fromEntries(orderReferencesMap)
                            const orderReferencesStr = JSON.stringify(orderReferencesEntries)
                            const orderReferencesModel: LineOrderReferences = JSON.parse(orderReferencesStr)
                            lineModel.orderReferences = orderReferencesModel

                        }
                        if (typeof (productSerialNumberMap) !== 'undefined') {

                            const productSerialNumberEntries = Object.fromEntries(productSerialNumberMap)
                            const productSerialNumberStr = JSON.stringify(productSerialNumberEntries)
                            const productSerialNumberModel: LineProductSerialNumber = JSON.parse(productSerialNumberStr)
                            lineModel.productSerialNumber = productSerialNumberModel

                        }
                        if (typeof (referencesMap) !== 'undefined') {

                            const referencesEntries = Object.fromEntries(referencesMap)
                            const referencesStr = JSON.stringify(referencesEntries)
                            const referencesModel: LineReferences = JSON.parse(referencesStr)
                            lineModel.references = referencesModel

                        }
                        if (typeof (taxMap) !== 'undefined') {

                            const taxEntries = Object.fromEntries(taxMap)
                            const taxStr = JSON.stringify(taxEntries)
                            const taxModel: LineTax = JSON.parse(taxStr)
                            lineModel.tax = taxModel

                        }
                        if (typeof (customsInformationMap) !== 'undefined') {


                            const customsInformationEntries = Object.fromEntries(customsInformationMap)
                            const customsInformationStr = JSON.stringify(customsInformationEntries)
                            const customsInformationModel: LineCustomsInformation = JSON.parse(customsInformationStr)
                            lineModel.customsInformation = customsInformationModel

                        }

                        lineList.push(lineModel)

                    })


                    invoiceModel.line = lineList

                }

                invoiceList.push(invoiceModel)

            })

            this.salesInvoices.invoice = invoiceList

        }

        return this.salesInvoices

    }
}