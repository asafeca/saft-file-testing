import { DocumentTotalsCurrency } from "../../../validations/model/saft/common/DocumentTotalsCurrency";
import { DocumentTotalsDeductible } from "../../../validations/model/saft/common/DocumentTotalsDeductible";
import { InvoiceReferences } from "../../../validations/model/saft/common/InvoiceReferences";
import { WithholdingTax } from "../../../validations/model/saft/common/WithholdingTax";
import { PurchaseDocumentTotlas } from "../../../validations/model/saft/sourcedocuments/purchaseinvoices/PurchaseDocumentTotlas";
import { PurchaseInvoice } from "../../../validations/model/saft/sourcedocuments/purchaseinvoices/PurchaseInvoice";
import { PurchaseInvoices } from "../../../validations/model/saft/sourcedocuments/purchaseinvoices/PurchaseInvoices";

export class PurchaseInvoicesMapToModel {
    private purchaseInvoicesModel = new PurchaseInvoices()
    private purchaseInvoicesMap: Map<string, Object>

    constructor(purchaseInvoicesMap: Map<string, Object>) {
        this.purchaseInvoicesMap = purchaseInvoicesMap
    }

    get(): PurchaseInvoices {

        const purchaseEntries = Object.fromEntries(this.purchaseInvoicesMap)
        const purchaseStr = JSON.stringify(purchaseEntries)
        this.purchaseInvoicesModel = JSON.parse(purchaseStr)

        const invoiceMapList = this.purchaseInvoicesMap.get('invoice') as Array<Map<string, Object>>
        if (typeof (invoiceMapList) !== 'undefined') {

            let invoiceModelList = new Array<PurchaseInvoice>()

            invoiceMapList.forEach(invoiceMap => {

                const invoiceEntries = Object.fromEntries(invoiceMap)
                const invoiceStr = JSON.stringify(invoiceEntries)
                let invoiceModel: PurchaseInvoice = JSON.parse(invoiceStr)

                const referencesMap = invoiceMap.get('references') as Map<string, Object>

                if (typeof (referencesMap) !== 'undefined') {

                    const referencesEntries = Object.fromEntries(referencesMap)
                    const referencesStr = JSON.stringify(referencesEntries)
                    const referencesModel: InvoiceReferences = JSON.parse(referencesStr)

                    invoiceModel.references = referencesModel

                }

                const documentTotalsMap = invoiceMap.get('documentTotals') as Map<string, Object>

                if (typeof (documentTotalsMap) !== 'undefined') {
                    const documentTotalsEntries = Object.fromEntries(documentTotalsMap)
                    const documentTotalsStr = JSON.stringify(documentTotalsEntries)
                    let documentTotalsModel: PurchaseDocumentTotlas = JSON.parse(documentTotalsStr)

                    const deductibleMap = documentTotalsMap.get('deductible') as Map<string, Object>

                    if (typeof (deductibleMap) !== 'undefined') {
                        const deductibleEntries = Object.fromEntries(deductibleMap)
                        const deductibleStr = JSON.stringify(deductibleEntries)
                        const deductibleModel: DocumentTotalsDeductible = JSON.parse(deductibleStr)
                        documentTotalsModel.deductible = deductibleModel
                    }

                    const currencyMap = documentTotalsMap.get('currency') as Map<string, Object>

                    if (typeof (currencyMap) !== 'undefined') {

                        const currencyEntries = Object.fromEntries(currencyMap)
                        const currencyStr = JSON.stringify(currencyEntries)
                        const currencyModel: DocumentTotalsCurrency = JSON.parse(currencyStr)

                        documentTotalsModel.currency = currencyModel
                    }

                    invoiceModel.documentTotals = documentTotalsModel

                }

                const withholdingTax = invoiceMap.get('withholdingTax') as Map<string, Object>

                if (typeof (withholdingTax) !== 'undefined') {
                    const withholdingTaxEntries = Object.fromEntries(withholdingTax)
                    const withholdingTaxStr = JSON.stringify(withholdingTaxEntries)
                    const withholdingTaxModel: WithholdingTax = JSON.parse(withholdingTaxStr)

                    invoiceModel.withholdingTax = withholdingTaxModel
                }


                invoiceModelList.push(invoiceModel)

            })


            this.purchaseInvoicesModel.invoice = invoiceModelList
        }


        return this.purchaseInvoicesModel
    }

}