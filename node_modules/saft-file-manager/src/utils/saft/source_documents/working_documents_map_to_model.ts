import { DocumentTotalsCurrency } from "../../../validations/model/saft/common/DocumentTotalsCurrency";
import { LineCustomsInformation } from "../../../validations/model/saft/common/LineCustomsInformation";
import { LineOrderReferences } from "../../../validations/model/saft/common/LineOrderReferences";
import { LineProductSerialNumber } from "../../../validations/model/saft/common/LineProductSerialNumber";
import { LineReferences } from "../../../validations/model/saft/common/LineReferences";
import { LineTax } from "../../../validations/model/saft/common/LineTax";
import { SAFTDocumentTotals } from "../../../validations/model/saft/common/SAFTDocumentTotals";
import { InvoiceLine } from "../../../validations/model/saft/sourcedocuments/salesinvoices/invoice/children/line/InvoiceLine";
import { DocumentStatus } from "../../../validations/model/saft/sourcedocuments/workingdocuments/children/DocumentStatus";
import { WorkDocument } from "../../../validations/model/saft/sourcedocuments/workingdocuments/children/WorkDocument";
import { WorkingDocuments } from "../../../validations/model/saft/sourcedocuments/workingdocuments/WorkingDocuments";

export class WorkingDocumentsMapToModel {
    private workingModel = new WorkingDocuments()
    private workingMap = new Map<string, Object>()

    constructor(workingMap: Map<string, Object>) {
        this.workingMap = workingMap
    }

    get(): WorkingDocuments {

        const workingEntries = Object.fromEntries(this.workingMap)
        const workingStr = JSON.stringify(workingEntries)
        this.workingModel = JSON.parse(workingStr)

        // WorkDocument

        const workMap = this.workingMap.get('workDocument') as Array<Map<string, Object>>
        let workList: Array<WorkDocument> = new Array()

        if (typeof (workMap) !== 'undefined') {
            workMap.forEach((item) => {
                const workEntries = Object.fromEntries(item)
                const workStr = JSON.stringify(workEntries)
                const workModel: WorkDocument = JSON.parse(workStr)

                // Line

                const lineMapList = item.get('line') as Array<Map<string, Object>>

                if (typeof (lineMapList) !== 'undefined') {

                    let lineList: Array<InvoiceLine> = new Array()

                    lineMapList.forEach((item) => {

                        const lineEntries = Object.fromEntries(item)
                        const lineStr = JSON.stringify(lineEntries)
                        const lineModel: InvoiceLine = JSON.parse(lineStr)

                        const orderReferencesMap = item.get('orderReferences') as Map<string, Object>
                        const productSerialNumberMap = item.get('productSerialNumber') as Map<string, Object>
                        const referencesMap = item.get('references') as Map<string, Object>
                        const taxMap = item.get('tax') as Map<string, Object>
                        const customsInformationMap = item.get('customsInformation') as Map<string, Object>


                        if (typeof (orderReferencesMap) !== 'undefined') {
                            const orderReferencesEntries = Object.fromEntries(orderReferencesMap)
                            const orderReferencesStr = JSON.stringify(orderReferencesEntries)
                            const orderReferencesModel: LineOrderReferences = JSON.parse(orderReferencesStr)
                            lineModel.orderReferences = orderReferencesModel

                        }
                        if (typeof (productSerialNumberMap) !== 'undefined') {

                            const productSerialNumberEntries = Object.fromEntries(productSerialNumberMap)
                            const productSerialNumberStr = JSON.stringify(productSerialNumberEntries)
                            const productSerialNumberModel: LineProductSerialNumber = JSON.parse(productSerialNumberStr)
                            lineModel.productSerialNumber = productSerialNumberModel

                        }
                        if (typeof (referencesMap) !== 'undefined') {

                            const referencesEntries = Object.fromEntries(referencesMap)
                            const referencesStr = JSON.stringify(referencesEntries)
                            const referencesModel: LineReferences = JSON.parse(referencesStr)
                            lineModel.references = referencesModel

                        }
                        if (typeof (taxMap) !== 'undefined') {

                            const taxEntries = Object.fromEntries(taxMap)
                            const taxStr = JSON.stringify(taxEntries)
                            const taxModel: LineTax = JSON.parse(taxStr)
                            lineModel.tax = taxModel

                        }
                        if (typeof (customsInformationMap) !== 'undefined') {


                            const customsInformationEntries = Object.fromEntries(customsInformationMap)
                            const customsInformationStr = JSON.stringify(customsInformationEntries)
                            const customsInformationModel: LineCustomsInformation = JSON.parse(customsInformationStr)
                            lineModel.customsInformation = customsInformationModel

                        }

                        lineList.push(lineModel)

                    })

                    workModel.line = lineList

                }

                // documentTotals

                const documentTotalsMap = item.get('documentTotals') as Map<string, Object>

                if (typeof (documentTotalsMap) !== 'undefined') {

                    const documentTotalsEntries = Object.fromEntries(documentTotalsMap)
                    const documentTotalsStr = JSON.stringify(documentTotalsEntries)
                    const documentTotalsModel: SAFTDocumentTotals = JSON.parse(documentTotalsStr)

                    const currencyMap = documentTotalsMap.get('currency') as Map<string, Object>
                    if (typeof (currencyMap) !== 'undefined') {
                        const currencyEntries = Object.fromEntries(currencyMap)
                        const currencyStr = JSON.stringify(currencyEntries)
                        const currencyModel: DocumentTotalsCurrency = JSON.parse(currencyStr)

                        documentTotalsModel.currency = currencyModel
                    }

                    workModel.documentTotals = documentTotalsModel

                }

                const documentStatusMap = item.get('documentStatus') as Map<string, Object>

                if (typeof (documentStatusMap) !== 'undefined') {

                    const documentStatusEntries = Object.fromEntries(documentStatusMap)
                    const documentStatusStr = JSON.stringify(documentStatusEntries)
                    const documentStatusModel: DocumentStatus = JSON.parse(documentStatusStr)
                    workModel.documentStatus = documentStatusModel
                }

                workList.push(workModel)

            })
        }

        this.workingModel.workDocument = workList

        return this.workingModel

    }
}