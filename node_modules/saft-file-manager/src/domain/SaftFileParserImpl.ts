import { SaftFileParser } from './SaftFileParser';
import { DOMParser } from 'xmldom';
import { TipoReporte } from '../domain/models/tipo_reporte';
import { FieldRules } from './models/field_rules';
import { Reporte } from './models/reporte';
import { FieldsValidation } from '../validations/fields_validation';
import { ErrorDetail } from './models/detalheErro';

export class SaftFileParserImpl implements SaftFileParser {
  public xmlParser = new DOMParser();

  parse(file: Uint8Array): Map<string, ErrorDetail> {


    let tipoReporte = new TipoReporte(11, "11")

    let reporte = new Reporte(11, tipoReporte, file)

    let rootDir = __dirname
    rootDir = rootDir.replace('domain', '')
    let stringData = require(`${rootDir}/assets/data.json`)

    const jsonStr = JSON.stringify(stringData);
    const structureList: Array<FieldRules> = JSON.parse(jsonStr);

    let filteredList = new Array<FieldRules>();

    structureList.filter(item => item.TIPO_REPORTE_ID === 11)
      .forEach((item => {
        if (item.IS_TIPO_COMPLEXO === 1 && item.ESTRUTURA_CAMPO_ID != undefined && item.ESTRUTURA_CAMPO_ID != null && item.ESTRUTURA_CAMPO_ID > 0) {

          const fatherItem = structureList.find(father => father.ID == item.ESTRUTURA_CAMPO_ID)

          let rule = new FieldRules()

          rule = fatherItem ?? new FieldRules()
          item.estruturaCampoObj = rule

        }
        filteredList.push(item)

      }))



    return new FieldsValidation().validate({ reporte, modelRules: filteredList });

  }
}
