import { ErrorDetail } from "../domain/models/detalheErro";
import { Reporte } from "../domain/models/reporte";
import { FieldRules } from "../domain/models/field_rules";
import { FileParser } from "./file_parser";
import { FileParserStorage } from "./file_starage_parser";
import { FileModelSAFT } from "./model/saft/FileModelSAFT";
import { MapToModel } from "../utils/map_to_model";
import { GroupFieldsValidation } from "./group_fields_validation";

export class FieldsValidation {

    validate({ reporte, modelRules }: { reporte: Reporte, modelRules: Array<FieldRules> }): Map<string, ErrorDetail> {

        FileParserStorage.dispose();

        const file = reporte.file;

        FileParserStorage.set(FileParser.parse(file, reporte), reporte = reporte)

        // Check fileModel Info if there is already an error

        if (this.modelHasErrors())
            return FileParserStorage.fileModel as Map<string, ErrorDetail>

        const result = this.processSaft({ fileModel: this.mapToFileModel(FileParserStorage.fileModel), modelRules: modelRules })

        // console.log(result)

        return result

    }

    modelHasErrors(): Boolean {
        let map = FileParserStorage.fileModel as Map<string, Object>

        return map.has('Error') ? true : false

    }

    mapToFileModel(obj: Object): FileModelSAFT {

        /**
        * FOR YOUR INFORMATION
        * 
        * commonly we use 
        * 
        * const entries = Object.fromEntries(mapObject)
        * 
        * const stringData =  JSON.stringfy(entries)
        * 
        * const saftModel : FileModelSAFT = JSON.parse(stringData)
        * 
        * 
        * // BUT IT'S NOT WORKING
        * 
        * That's why the convertion from Saft Map Object to SaftModel had to be hard coded as below:
        * 
        */


        const commonMap = obj as Map<string, Object>

        const generalLedgerEntries = commonMap.get('generalLedgerEntries') as Map<string, Object>
        const headerMap = commonMap.get('header') as Map<string, Object>
        const masterFilesMap = commonMap.get('masterFiles') as Map<string, Object>
        const sourceDocumentsMap = commonMap.get('sourceDocuments') as Map<string, Object>


        return MapToModel.getSaftModel({ generalLedgerEntries, headerMap, masterFilesMap, sourceDocumentsMap })
    }


    processSaft({ fileModel, modelRules }: { fileModel: FileModelSAFT, modelRules: Array<FieldRules> }): Map<string, ErrorDetail> {

        let errorList = new Map<string, ErrorDetail>()


        const model = new Map(Object.entries(fileModel))


        errorList = new GroupFieldsValidation(model, modelRules).validate()


        return errorList
    }


}